var path = require("path");
var bulk = require("bulk-require");
var util = require("util");
var _ = require("underscore");

_.templateSettings = {
  interpolate: /\{\@\=(.+?)\@\}/gim,
  evaluate: /\{\@(.+?)\@\}/gim
}

module.exports = function(source) {

	this.cacheable();
	var callback = this.async();

	var base_path = path.join(__dirname,"../../");
	var initializers_dir = path.join(base_path,"app/initializers");
	var ngConfig = path.join(base_path,"ngconfig.json");
	var constants = path.join(base_path,"app/constants.js");

	function dump_object(obj) {
    var buff, prop;
    buff = [];
    for (prop in obj) {
        buff.push(dump_to_string(prop) + ': ' + dump_to_string(obj[prop]))
    }
    return '{' + buff.join(', ') + '}';
  }

  function dump_array(arr) {
    var buff, i, len;
    buff = [];
    for (i=0, len=arr.length; i<len; i++) {
        buff.push(dump_to_string(arr[i]));
    }
    return '[' + buff.join(', ') + ']';
  }

  function dump_to_string(obj) {
    if (toString.call(obj) == '[object Function]') {
        return obj.toString();
    } else if (toString.call(obj) == '[object Array]') {
        return dump_array(obj);
    } else if (toString.call(obj) == '[object String]') {
        return '"' + obj.replace('"', '\\"') + '"';
    } else if (obj === Object(obj)) {
        return dump_object(obj);
    }
    return obj.toString();
  }

	function getStaticFiles(){
		try{
			var config = require(ngConfig);
			var constant = require(constants);
		}catch(e){
			return false;
		}
		config.LET = constant;
		return config;
	}

	// Getting constants
	var constants = getStaticFiles();
	if(constants){
	}else{
		console.log("Unable to read constants.js inside app/");
	}

	val = bulk(__dirname,"../../app/initializers/*.js");

	// Replace initializers

  if(Object.keys(val) && typeof(val[".."]) !== 'undefined'){

  	// Replacing string with initializers object
  	source = source.replace("'@loadInitializers'",dump_to_string(val[".."][".."]["app"]["initializers"]));
  }
  else{
  	// Else let it be whatever it is
    source = source.replace("'@loadInitializers'",dump_to_string({}));
  }

	compiled = _.template(source);
	source = compiled(constants);
	callback(null, source);
};