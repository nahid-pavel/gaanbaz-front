module.exports = { 'content/controller/controller.coffee': '###*\n@author\n@description\n@name {{name}}Controller\n###\n\n### @ngInject ###\nmodule.exports = ($scope) ->\n  $scope.greeting = "Hello world from {{name}}Controller"\n  return\n',
  'content/controller/controller.js': '// Generated by CoffeeScript 1.8.0\n\n/**\n@author\n@description\n@name {{name}}Controller\n */\n\n\n/* @ngInject */\n\n(function() {\n  module.exports = function($scope) {\n    $scope.greeting = "Hello world from {{name}}Controller";\n  };\n\n}).call(this);\n',
  'content/controller/test.coffee': '"use strict"\ndescribe "Controller: {{name}}Controller", ->\n\n  # load the controller\'s module\n  beforeEach angular.mock.module("{@= app_name @}")\n\n  # Initialize the controller and a mock scope\n  beforeEach inject(($controller, $rootScope) ->\n    scope = $rootScope.$new()\n    {{name}}Controller = $controller("{{name}}Controller",\n      $scope: scope\n    )\n    return\n  )\n  it "should attach greeting to scope", ->\n    expect(scope.greeting).toBe "Hello world from {{name}}Controller"\n    return\n  return\n',
  'content/controller/test.js': '\'use strict\';\n\ndescribe(\'Controller: {{name}}Controller\', function () {\n\n  // load the controller\'s module\n  beforeEach(angular.mock.module(\'{@= app_name @}\'));\n\n  var {{name}}Controller,scope;\n\n  // Initialize the controller and a mock scope\n  beforeEach(inject(function ($controller, $rootScope) {\n    scope = $rootScope.$new();\n    {{name}}Controller = $controller(\'{{name}}Controller\', {\n      $scope: scope\n    });\n  }));\n\n  it(\'should attach greeting to scope\', function () {\n    expect(scope.greeting).toBe(\'Hello world from {{name}}Controller\');\n  });\n});\n',
  'content/directive/directive.coffee': '###*\n@author\n@description\n@name {{name}}\n###\n"use strict"\n\n### @ngInject ###\n\nmodule.exports = ->\n  restrict: "E"\n  replace: true\n  template: "<h1>lidless, wreathed in flame, {{1 + 1}} times</h1>"\n',
  'content/directive/directive.js': '// Generated by CoffeeScript 1.8.0\n\n/**\n@author\n@description\n@name {{name}}\n */\n\n(function() {\n  "use strict";\n\n  /* @ngInject */\n  module.exports = function() {\n    return {\n      restrict: "E",\n      replace: true,\n      template: "<h1>lidless, wreathed in flame, {{1 + 1}} times</h1>"\n    };\n  };\n\n}).call(this);\n',
  'content/directive/test.coffee': '"use strict"\ndescribe "Directive: {{name}}", ->\n  # Load app module, which contains the directive\n  beforeEach angular.mock.module("{@= app_name @}")\n\n  # Store references to $rootScope and $compile\n  # so they are available to all tests in this describe block\n  beforeEach inject((_$compile_, _$rootScope_) ->\n\n    # The injector unwraps the underscores (_) from around the parameter names when matching\n    $compile = _$compile_\n    $rootScope = _$rootScope_\n    return\n  )\n  it "Replaces the element with the appropriate content", ->\n\n    # Compile a piece of HTML containing the directive\n    element = $compile("{{element}}")($rootScope)\n\n    # fire all the watches, so the scope expression {{1 + 1}} will be evaluated\n    $rootScope.$digest()\n\n    # Check that the compiled element contains the templated content\n    expect(element.html()).toContain "lidless, wreathed in flame, 2 times"\n    return\n\n  return\n',
  'content/directive/test.js': '// Generated by CoffeeScript 1.8.0\n(function() {\n  "use strict";\n  describe("Directive: {{name}}", function() {\n    beforeEach(angular.mock.module("{@= app_name @}"));\n    beforeEach(inject(function(_$compile_, _$rootScope_) {\n      var $compile, $rootScope;\n      $compile = _$compile_;\n      $rootScope = _$rootScope_;\n    }));\n    it("Replaces the element with the appropriate content", function() {\n      var element;\n      element = $compile("{{element}}")($rootScope);\n      $rootScope.$digest();\n      expect(element.html()).toContain("lidless, wreathed in flame, 2 times");\n    });\n  });\n\n}).call(this);\n',
  'content/factory/factory.coffee': '###*\n@author\n@description\n@name {{name}}Factory\n###\n\n### @ngInject ###\nmodule.exports = () ->\n  factory = {}\n  factory.generators = [\'controller\',\'service\',\'factory\',\'directive\',\'initializer\',\'filter\',\'template\']\n  factory\n',
  'content/factory/factory.js': '// Generated by CoffeeScript 1.8.0\n\n/**\n@author\n@description\n@name {{name}}Factory\n */\n\n\n/* @ngInject */\n\n(function() {\n  module.exports = function() {\n    var factory;\n    factory = {};\n    factory.generators = [\'controller\', \'service\', \'factory\', \'directive\', \'initializer\', \'filter\', \'template\'];\n    return factory;\n  };\n\n}).call(this);\n',
  'content/factory/test.coffee': '"use strict"\ndescribe "Factory: {{name}}Factory", ->\n\n  # load the controller\'s module\n  beforeEach angular.mock.module("{@= app_name @}")\n\n  # Initialize the controller and a mock scope\n  beforeEach inject((_{{name}}Factory_) ->\n    {{name}}Factory = _{{name}}_\n    return\n  )\n  it "should count number of generators ", ->\n    expect({{name}}Factory.generators.length).toEqual 7\n    return\n  return\n',
  'content/factory/test.js': '\'use strict\';\n\ndescribe(\'Factory: {{name}}Factory\', function () {\n\n  // load the controller\'s module\n  beforeEach(angular.mock.module(\'{@= app_name @}\'));\n\n  var {{name}}Factory;\n\n  // Initialize the controller and a mock scope\n  beforeEach(inject(function (_{{name}}Factory_) {\n    {{name}}Factory = _{{name}}_;\n  }));\n\n  it(\'should count number of generators \', function () {\n    expect({{name}}Factory.generators.length).toEqual(7);\n  });\n});\n',
  'content/filter/filter.coffee': '###*\n@author\n@description\n@name {{name}}Filter\n###\n"use strict"\n\n### @ngInject ###\nmodule.exports = ->\n  (input) ->\n    "filtered " + input\n',
  'content/filter/filter.js': '// Generated by CoffeeScript 1.8.0\n\n/**\n@author\n@description\n@name {{name}}Filter\n */\n\n(function() {\n  "use strict";\n\n  /* @ngInject */\n  module.exports = function() {\n    return function(input) {\n      return "filtered " + input;\n    };\n  };\n\n}).call(this);\n',
  'content/filter/test.coffee': '"use strict"\ndescribe "Filter: {{name}}Filter", ->\n\n  # load the filter\'s module\n  beforeEach angular.mock.module("{@= app_name @}")\n\n  # Initialize the filter\n  beforeEach inject(($filter) ->\n    {{name}}Filter = $filter("{{name}}Filter")\n    return\n  )\n  it "should filter given text", ->\n    text = "hello world"\n    expect({{name}}Filter(text)).toBe "filtered" + text\n    return\n  return\n',
  'content/filter/test.js': '\'use strict\';\n\ndescribe(\'Filter: {{name}}Filter\', function () {\n\n  // load the filter\'s module\n  beforeEach(angular.mock.module(\'{@= app_name @}\'));\n\n  var {{name}}Filter;\n\n  // Initialize the filter\n  beforeEach(inject(function ($filter) {\n    {{name}}Filter = $filter(\'{{name}}Filter\');\n  }));\n\n  it(\'should filter given text\', function () {\n    var text = "hello world";\n    expect({{name}}Filter(text)).toBe(\'filtered\' + text);\n  });\n});\n',
  'content/initializer/initializer.coffee': '###*\n@author\n@description\n@name {{name}}\n\n--------------------------------------------------------\nINITIALIZERS\n--------------------------------------------------------\n\nInitializers are special methods and values processed and\ncomputed before bootstrapping your angular app.\n\nThink about a situation you want to fetch some user data\nbefore you bootstrap your angular app.\n\nExample :-\n\n@note Shows an example to fetch user data before bootstraping angular app\nand use it later\n\n  resolve: unction($q,$http,userService){\n    var deferred = $q.defer();\n    $http.get(\'user\').success(function(userData){\n      userService = userData;\n      defer.resolve(\'i got user data\');\n    }).error(function(error){\n      defer.reject(\'i cannot start without user data\');\n    });\n    return deferred.promise;\n  }\n###\n\n### @ngInject ###\nmodule.exports =\n  provider: "{{name}}"\n  ### It is required to do DI manually here until i find a way to fix it ###\n  resolve: [\'$q\',($q) -> #@ngInject\n    deferred = $q.defer()\n    deferred.resolve "echo {{name}} and then start angular app"\n    deferred.promise\n  ]',
  'content/initializer/initializer.js': '// Generated by CoffeeScript 1.8.0\n\n/**\n@author\n@description\n@name {{name}}\n\n--------------------------------------------------------\nINITIALIZERS\n--------------------------------------------------------\n\nInitializers are special methods and values processed and\ncomputed before bootstrapping your angular app.\n\nThink about a situation you want to fetch some user data\nbefore you bootstrap your angular app.\n\nExample :-\n\n@note Shows an example to fetch user data before bootstraping angular app\nand use it later\n\n  resolve: unction($q,$http,userService){\n    var deferred = $q.defer();\n    $http.get(\'user\').success(function(userData){\n      userService = userData;\n      defer.resolve(\'i got user data\');\n    }).error(function(error){\n      defer.reject(\'i cannot start without user data\');\n    });\n    return deferred.promise;\n  }\n */\n\n(function() {\n  module.exports = {\n    provider: "{{name}}",\n    // It is required to do DI manually here until i find a way to fix it\n    resolve: [\'$q\',function($q) {\n      var deferred;\n      deferred = $q.defer();\n      deferred.resolve("echo {{name}} and then start angular app");\n      return deferred.promise;\n    }\n  }];\n\n}).call(this);\n',
  'content/service/service.coffee': '###*\n@author\n@description\n@name {{name}}Service\n###\n\n### @ngInject ###\nmodule.exports = () ->\n  this.generators = [\'controller\',\'service\',\'factory\',\'directive\',\'initializer\',\'filter\',\'template\']\n  return\n',
  'content/service/service.js': '// Generated by CoffeeScript 1.8.0\n\n/**\n@author\n@description\n@name {{name}}Service\n */\n\n\n/* @ngInject */\n\n(function() {\n  module.exports = function() {\n    this.generators = [\'controller\', \'service\', \'factory\', \'directive\', \'initializer\', \'filter\', \'template\'];\n  };\n\n}).call(this);\n',
  'content/service/test.coffee': '"use strict"\ndescribe "Service: {{name}}Service", ->\n\n  # load the controller\'s module\n  beforeEach angular.mock.module("{@= app_name @}")\n\n  # Initialize the controller and a mock scope\n  beforeEach inject((_{{name}}Service_) ->\n    {{name}}Service = _{{name}}_\n    return\n  )\n  it "should count number of generators ", ->\n    expect({{name}}Service.generators.length).toEqual 7\n    return\n  return\n',
  'content/service/test.js': '\'use strict\';\n\ndescribe(\'Service: {{name}}Service\', function () {\n\n  // load the controller\'s module\n  beforeEach(angular.mock.module(\'{@= app_name @}\'));\n\n  var {{name}}Service;\n\n  // Initialize the controller and a mock scope\n  beforeEach(inject(function (_{{name}}Service_) {\n    {{name}}Service = _{{name}}_;\n  }));\n\n  it(\'should count number of generators \', function () {\n    expect({{name}}Service.generators.length).toEqual(7);\n  });\n});\n' }