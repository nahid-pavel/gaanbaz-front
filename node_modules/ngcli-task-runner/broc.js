// Generated by CoffeeScript 1.8.0
(function() {
  var BroccoliBuild, Lineup, Watcher, broccoli, cli, helpers, lineup, mergeTrees, ngCli, path, rimraf, _;

  path = require("path");

  broccoli = require("broccoli");

  rimraf = require("rimraf");

  Watcher = require("broccoli/lib/watcher");

  Lineup = require("lineup");

  lineup = new Lineup();

  mergeTrees = require("broccoli-merge-trees");

  helpers = require("broccoli-kitchen-sink-helpers");

  ngCli = require("./helpers.js");

  cli = new ngCli();

  _ = require("lodash");

  BroccoliBuild = (function() {
    function BroccoliBuild() {}


    /**
      @method builder
      @param tree
      @description Takes input broccoli tree
     */

    BroccoliBuild.prototype.builder = function(tree) {
      return new broccoli.Builder(mergeTrees(tree, {
        overwrite: true
      }));
    };


    /**
      @method build
      @param dest
      @param tree
      @description Run build tasks for broccoli and outputs same to a destination.
     */

    BroccoliBuild.prototype.build = function(dest, tree) {
      var builder;
      lineup.action.info("build", "Starting build process");
      builder = this.builder(tree);
      builder.build().then(function(output) {
        lineup.log.success("Build successfull");
        rimraf.sync(dest);
        helpers.copyRecursivelySync(output.directory, dest);
      })["catch"](function(err) {
        lineup.log.error(err);
      });
    };


    /**
      @method readTree
      @param callback
      @description Reads ngCli addons and pull build tasks from them.
     */

    BroccoliBuild.prototype.readTree = function(cb) {
      cli._getAppAddons(function(err, addons) {
        var ngTasks;
        ngTasks = [];
        if (addons.tasks) {
          _.each(addons.tasks, function(task) {
            return ngTasks.push(task.init());
          });
          return cb(null, _.flatten(ngTasks));
        } else {
          return cb('no build tasks found');
        }
      });
    };


    /**
      @method serve
      @param tree
      @param options
      @description Serve ngCli app using broccoli serve , requires config options
     */

    BroccoliBuild.prototype.serve = function(tree, options) {
      var builder;
      builder = this.builder(tree);
      broccoli.server.serve(builder, {
        host: options.host,
        port: options.port,
        liveReloadPort: options.lrPort
      });
    };


    /**
      @method watch
      @param dest
      @param tree
      @description Watch for file changes and rebuild tasks, do not run a server.
     */

    BroccoliBuild.prototype.watch = function(dest, tree) {
      var builder, watcher;
      builder = this.builder(tree);
      watcher = new Watcher(builder, {
        interval: 100
      });
      watcher.on('change', function(results) {
        lineup.action.info("change", "Changes detected");
        rimraf.sync(dest);
        helpers.copyRecursivelySync(results.directory, dest);
        lineup.log.success("Build successfull");
        return watcher.emit("livereload");
      });
    };


    /**
      @method run
      @param type
      @description Entrance method to this class,
        takes type [build,serve]
        reads config from ngConfig
        and invokes one of the above method
     */

    BroccoliBuild.prototype.run = function(type) {
      var dist, self;
      self = this;

      /**
        Grabs dist as the destination folder
       */
      dist = path.join(__dirname, '../../dist');

      /**
        Reads ngConfig using ngCli helper
       */
      cli._getNgConfig(function(err, config) {
        if (err) {
          return lineup.log.error(err);
        } else {

          /**
            Reads addons and pull all builds tasks from them using ngCli helper
           */
          return self.readTree(function(err, tree) {
            if (err) {
              return lineup.log.error(err);
            } else {
              if (type === 'serve') {
                if (config.run_server) {
                  return self.serve(tree, config);
                } else {
                  return self.watch(dist, tree);
                }
              } else {
                return self.build(dist, tree);
              }
            }
          });
        }
      });
    };

    return BroccoliBuild;

  })();

  module.exports = BroccoliBuild;

}).call(this);
